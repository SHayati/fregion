% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fregion.test.R
\name{fregion.test}
\alias{fregion.test}
\title{Perform a hypothesis test based on a functional confidence region}
\usage{
fregion.test(x, x0 = NULL, cov, N = 1, type = c("Ec"), pc.cut = c(0.99),
  prec = NULL, hat.cov = NULL, df = NULL)
}
\arguments{
\item{x}{Observed function. It can be either a vector, of fd object in 'fda' package.}

\item{x0}{The function under the null hypothesis. zero function is assumed when not given.}

\item{cov}{The covaraicne operator (as matrix) for the random function x. The eigen decomposition of covariance operator can be used instead.}

\item{N}{Sample size. It should be '1' if 'cov' is the covariance operator for 'x' itself. If 'x' is the mean of an i.i.d. sample of size 'N' and the 'cov' is the covariance operator of each unit in the sample, then this 'N' can be used here.}

\item{type}{This specifies which regions to be used for the tests. It should be a collection of the followings : "Enorm", "Epc", "Ec", "Ec1", "Rz", "Rz1", "Rzs", or "Rz1s".}

\item{pc.cut}{It takes a vector of number of fpc to use in each testing. For integer values, fpc up to those values will be used. If it's a value from 0 to 1, this specifies the proportion of variance that should be explained by the fpcs. If it is 0, all the available fpcs will be used as long as the size of eigenvalues are greater than .Machine$double.eps.}

\item{prec}{This determines the accuracy of imhof. One may try to modify this if p-value achieved in Ellipsoid form other than "Epc" gives negative value. It should the the form of c(epsabs, epsrel, limit).}

\item{hat.cov}{This is estimated covariance operator, which will be used when 'cov' is given as a parametric one and small sample version is used. Usually not needed.}

\item{df}{Degree of freedom to use in small sample versions with suffix 's'}
}
\value{
p-value achieved from it.
}
\description{
Perform a hypothesis test based on a functional confidence region
}
\examples{
## Generate Sample
p <- 100 ; N <- 50
grid <- make.grid(p)
mu0 <- mean.f.poly(grid,c(0,1)) ; names(mu0) <- grid
mu <- mean.f.poly(grid,c(0,1.1)) ; names(mu) <- grid
cov.m <- make.cov.m(cov.f <- cov.f.st.matern, grid=grid, cov.f.params=c(1/2,1,1/4))
X <- make.sample(mu,cov.m,N)
## Find Estimates
hat.mu <- rowMeans(X)
hat.cov.m <- crossprod(t(X - hat.mu)) / (N-1)
## Perform Test
fregion.test(hat.mu,mu0,hat.cov.m,N,type=c("ALL"),pc.cut=c(3,5,0.99,0.999,0))
}

